<?php

/**
 * AUTO GENERATED BY LUTICATE GENERATOR
 * ANY CHANGES WILL BE OVERWRITTEN
 */

namespace App\Http\DataAccess\SP;

use Luticate\Utils\LuSpDbo;
use Luticate\Utils\LuMultipleDbo;
use Luticate\Utils\LuStringUtils;
use Illuminate\Support\Facades\DB;

class SpGetMatchesVs extends LuSpDbo {

    /**
    * @param $dam
    * @return \App\Http\DataAccess\SP\SpGetMatchesVs|null
    */
    protected static function damToDbo($dam)
    {
        if (is_null($dam))
            return null;
        $dbo = new SpGetMatchesVs();

        $dbo->setId(LuStringUtils::convertJsonString($dam->id));
        $dbo->setPlayer1(LuStringUtils::convertJsonString($dam->player1));
        $dbo->setPlayer2(LuStringUtils::convertJsonString($dam->player2));
        $dbo->setDate(LuStringUtils::convertJsonString($dam->date));
        $dbo->setSets(LuStringUtils::convertJsonString($dam->sets));
        $dbo->setTournament(LuStringUtils::convertJsonString($dam->tournament));

        return $dbo;
    }


    /**
    * @param $_player1_id integer
    * @param $_player2_id integer
    * @return \App\Http\DataAccess\SP\SpGetMatchesVs[];
    */
    public static function execute($_player1_id, $_player2_id)
    {
        $values = DB::select('SELECT to_json(data.id) AS id, to_json(data.player1) AS player1, to_json(data.player2) AS player2, to_json(data.date) AS date, to_json(data.sets) AS sets, to_json(data.tournament) AS tournament FROM sp_get_matches_vs(:_player1_id, :_player2_id) data', array(":_player1_id" => $_player1_id, ":_player2_id" => $_player2_id));
        $dboValues = array();
        foreach ($values as $value)
            $dboValues[] = self::damToDbo($value);
        return $dboValues;
    }

    /**
    * @param $_player1_id integer
    * @param $_player2_id integer
    * @param $page int The page number, 0 based
    * @param $perPage int The number of items per page
    * @return \Luticate\Utils\LuMultipleDbo;
    */
    public static function getMultipleJson($_player1_id, $_player2_id, $page, $perPage)
    {
        $values = DB::select('SELECT (SELECT count(*) FROM sp_get_matches_vs(:_player1_id, :_player2_id)) as count, (SELECT json_agg(q) FROM (SELECT * FROM sp_get_matches_vs(:_player1_id, :_player2_id) OFFSET (:page::int * :perPage::int) LIMIT :perPage) q) as data',
            array(":_player1_id" => $_player1_id, ":_player2_id" => $_player2_id, ":page" => $page, ":perPage" => $perPage));
        $value = $values[0];
        if (is_null($value->data))
        {
            $value->data = '[]';
        }
        $data = LuStringUtils::convertJsonString($value->data);
        return new LuMultipleDbo($value->count, $data);
    }

    public function jsonSerialize()
    {
        return array(
            "Id" => $this->_id,
            "Player1" => $this->_player1,
            "Player2" => $this->_player2,
            "Date" => $this->_date,
            "Sets" => $this->_sets,
            "Tournament" => $this->_tournament
        );
    }

    public static function jsonDeserialize($json)
    {
        $dbo = new SpGetMatchesVs();
        if (isset($json["Id"])) {
            $dbo->setId($json["Id"]);
        }
        if (isset($json["Player1"])) {
            $dbo->setPlayer1($json["Player1"]);
        }
        if (isset($json["Player2"])) {
            $dbo->setPlayer2($json["Player2"]);
        }
        if (isset($json["Date"])) {
            $dbo->setDate($json["Date"]);
        }
        if (isset($json["Sets"])) {
            $dbo->setSets($json["Sets"]);
        }
        if (isset($json["Tournament"])) {
            $dbo->setTournament($json["Tournament"]);
        }
        return $dbo;
    }

    public static function generateSample()
    {
        $dbo = new SpGetMatchesVs();
        $dbo->setId(42);
        $dbo->setPlayer1("sample string");
        $dbo->setPlayer2("sample string");
        $dbo->setDate("sample string");
        $dbo->setSets("sample string");
        $dbo->setTournament("sample string");
        return $dbo;
    }


    /**
    * @var integer
    */
    protected $_id;
    public function getId()
    {
        return $this->_id;
    }
    public function setId($value)
    {
        $this->_id = $value;
    }

    /**
    * @var USER-DEFINED
    */
    protected $_player1;
    public function getPlayer1()
    {
        return $this->_player1;
    }
    public function setPlayer1($value)
    {
        $this->_player1 = $value;
    }

    /**
    * @var USER-DEFINED
    */
    protected $_player2;
    public function getPlayer2()
    {
        return $this->_player2;
    }
    public function setPlayer2($value)
    {
        $this->_player2 = $value;
    }

    /**
    * @var timestamp without time zone
    */
    protected $_date;
    public function getDate()
    {
        return $this->_date;
    }
    public function setDate($value)
    {
        $this->_date = $value;
    }

    /**
    * @var ARRAY
    */
    protected $_sets;
    public function getSets()
    {
        return $this->_sets;
    }
    public function setSets($value)
    {
        $this->_sets = $value;
    }

    /**
    * @var USER-DEFINED
    */
    protected $_tournament;
    public function getTournament()
    {
        return $this->_tournament;
    }
    public function setTournament($value)
    {
        $this->_tournament = $value;
    }
}
