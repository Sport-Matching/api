<?php
/**
 * InputItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Experiment created on 5/25/2016
 *
 * No description provided for this web service.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InputItem Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InputItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inputItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'j1' => 'string',
        'j1_g1' => 'int',
        'j1_t1' => 'int',
        'j1_p1' => 'int',
        'j2_g1' => 'int',
        'j2_t1' => 'int',
        'j2_p1' => 'int',
        'j1_w3' => 'int',
        'j1_t3' => 'int',
        'j1_p3' => 'int',
        'j2_w3' => 'int',
        'j2_t3' => 'int',
        'j2_p3' => 'int',
        'j1_age' => 'int',
        'j2_age' => 'int',
        'j1_rank' => 'int',
        'j2_rank' => 'int',
        'ground' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'j1' => 'j1',
        'j1_g1' => 'j1_g1',
        'j1_t1' => 'j1_t1',
        'j1_p1' => 'j1_p1',
        'j2_g1' => 'j2_g1',
        'j2_t1' => 'j2_t1',
        'j2_p1' => 'j2_p1',
        'j1_w3' => 'j1_w3',
        'j1_t3' => 'j1_t3',
        'j1_p3' => 'j1_p3',
        'j2_w3' => 'j2_w3',
        'j2_t3' => 'j2_t3',
        'j2_p3' => 'j2_p3',
        'j1_age' => 'j1_age',
        'j2_age' => 'j2_age',
        'j1_rank' => 'j1_rank',
        'j2_rank' => 'j2_rank',
        'ground' => 'ground'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'j1' => 'setJ1',
        'j1_g1' => 'setJ1G1',
        'j1_t1' => 'setJ1T1',
        'j1_p1' => 'setJ1P1',
        'j2_g1' => 'setJ2G1',
        'j2_t1' => 'setJ2T1',
        'j2_p1' => 'setJ2P1',
        'j1_w3' => 'setJ1W3',
        'j1_t3' => 'setJ1T3',
        'j1_p3' => 'setJ1P3',
        'j2_w3' => 'setJ2W3',
        'j2_t3' => 'setJ2T3',
        'j2_p3' => 'setJ2P3',
        'j1_age' => 'setJ1Age',
        'j2_age' => 'setJ2Age',
        'j1_rank' => 'setJ1Rank',
        'j2_rank' => 'setJ2Rank',
        'ground' => 'setGround'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'j1' => 'getJ1',
        'j1_g1' => 'getJ1G1',
        'j1_t1' => 'getJ1T1',
        'j1_p1' => 'getJ1P1',
        'j2_g1' => 'getJ2G1',
        'j2_t1' => 'getJ2T1',
        'j2_p1' => 'getJ2P1',
        'j1_w3' => 'getJ1W3',
        'j1_t3' => 'getJ1T3',
        'j1_p3' => 'getJ1P3',
        'j2_w3' => 'getJ2W3',
        'j2_t3' => 'getJ2T3',
        'j2_p3' => 'getJ2P3',
        'j1_age' => 'getJ1Age',
        'j2_age' => 'getJ2Age',
        'j1_rank' => 'getJ1Rank',
        'j2_rank' => 'getJ2Rank',
        'ground' => 'getGround'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['j1'] = isset($data['j1']) ? $data['j1'] : null;
        $this->container['j1_g1'] = isset($data['j1_g1']) ? $data['j1_g1'] : null;
        $this->container['j1_t1'] = isset($data['j1_t1']) ? $data['j1_t1'] : null;
        $this->container['j1_p1'] = isset($data['j1_p1']) ? $data['j1_p1'] : null;
        $this->container['j2_g1'] = isset($data['j2_g1']) ? $data['j2_g1'] : null;
        $this->container['j2_t1'] = isset($data['j2_t1']) ? $data['j2_t1'] : null;
        $this->container['j2_p1'] = isset($data['j2_p1']) ? $data['j2_p1'] : null;
        $this->container['j1_w3'] = isset($data['j1_w3']) ? $data['j1_w3'] : null;
        $this->container['j1_t3'] = isset($data['j1_t3']) ? $data['j1_t3'] : null;
        $this->container['j1_p3'] = isset($data['j1_p3']) ? $data['j1_p3'] : null;
        $this->container['j2_w3'] = isset($data['j2_w3']) ? $data['j2_w3'] : null;
        $this->container['j2_t3'] = isset($data['j2_t3']) ? $data['j2_t3'] : null;
        $this->container['j2_p3'] = isset($data['j2_p3']) ? $data['j2_p3'] : null;
        $this->container['j1_age'] = isset($data['j1_age']) ? $data['j1_age'] : null;
        $this->container['j2_age'] = isset($data['j2_age']) ? $data['j2_age'] : null;
        $this->container['j1_rank'] = isset($data['j1_rank']) ? $data['j1_rank'] : null;
        $this->container['j2_rank'] = isset($data['j2_rank']) ? $data['j2_rank'] : null;
        $this->container['ground'] = isset($data['ground']) ? $data['ground'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['j1'] === null) {
            $invalid_properties[] = "'j1' can't be null";
        }
        if ($this->container['j1_g1'] === null) {
            $invalid_properties[] = "'j1_g1' can't be null";
        }
        if ($this->container['j1_t1'] === null) {
            $invalid_properties[] = "'j1_t1' can't be null";
        }
        if ($this->container['j1_p1'] === null) {
            $invalid_properties[] = "'j1_p1' can't be null";
        }
        if ($this->container['j2_g1'] === null) {
            $invalid_properties[] = "'j2_g1' can't be null";
        }
        if ($this->container['j2_t1'] === null) {
            $invalid_properties[] = "'j2_t1' can't be null";
        }
        if ($this->container['j2_p1'] === null) {
            $invalid_properties[] = "'j2_p1' can't be null";
        }
        if ($this->container['j1_w3'] === null) {
            $invalid_properties[] = "'j1_w3' can't be null";
        }
        if ($this->container['j1_t3'] === null) {
            $invalid_properties[] = "'j1_t3' can't be null";
        }
        if ($this->container['j1_p3'] === null) {
            $invalid_properties[] = "'j1_p3' can't be null";
        }
        if ($this->container['j2_w3'] === null) {
            $invalid_properties[] = "'j2_w3' can't be null";
        }
        if ($this->container['j2_t3'] === null) {
            $invalid_properties[] = "'j2_t3' can't be null";
        }
        if ($this->container['j2_p3'] === null) {
            $invalid_properties[] = "'j2_p3' can't be null";
        }
        if ($this->container['j1_age'] === null) {
            $invalid_properties[] = "'j1_age' can't be null";
        }
        if ($this->container['j2_age'] === null) {
            $invalid_properties[] = "'j2_age' can't be null";
        }
        if ($this->container['j1_rank'] === null) {
            $invalid_properties[] = "'j1_rank' can't be null";
        }
        if ($this->container['j2_rank'] === null) {
            $invalid_properties[] = "'j2_rank' can't be null";
        }
        if ($this->container['ground'] === null) {
            $invalid_properties[] = "'ground' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['j1'] === null) {
            return false;
        }
        if ($this->container['j1_g1'] === null) {
            return false;
        }
        if ($this->container['j1_t1'] === null) {
            return false;
        }
        if ($this->container['j1_p1'] === null) {
            return false;
        }
        if ($this->container['j2_g1'] === null) {
            return false;
        }
        if ($this->container['j2_t1'] === null) {
            return false;
        }
        if ($this->container['j2_p1'] === null) {
            return false;
        }
        if ($this->container['j1_w3'] === null) {
            return false;
        }
        if ($this->container['j1_t3'] === null) {
            return false;
        }
        if ($this->container['j1_p3'] === null) {
            return false;
        }
        if ($this->container['j2_w3'] === null) {
            return false;
        }
        if ($this->container['j2_t3'] === null) {
            return false;
        }
        if ($this->container['j2_p3'] === null) {
            return false;
        }
        if ($this->container['j1_age'] === null) {
            return false;
        }
        if ($this->container['j2_age'] === null) {
            return false;
        }
        if ($this->container['j1_rank'] === null) {
            return false;
        }
        if ($this->container['j2_rank'] === null) {
            return false;
        }
        if ($this->container['ground'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets j1
     * @return string
     */
    public function getJ1()
    {
        return $this->container['j1'];
    }

    /**
     * Sets j1
     * @param string $j1
     * @return $this
     */
    public function setJ1($j1)
    {
        $this->container['j1'] = $j1;

        return $this;
    }

    /**
     * Gets j1_g1
     * @return int
     */
    public function getJ1G1()
    {
        return $this->container['j1_g1'];
    }

    /**
     * Sets j1_g1
     * @param int $j1_g1
     * @return $this
     */
    public function setJ1G1($j1_g1)
    {
        $this->container['j1_g1'] = $j1_g1;

        return $this;
    }

    /**
     * Gets j1_t1
     * @return int
     */
    public function getJ1T1()
    {
        return $this->container['j1_t1'];
    }

    /**
     * Sets j1_t1
     * @param int $j1_t1
     * @return $this
     */
    public function setJ1T1($j1_t1)
    {
        $this->container['j1_t1'] = $j1_t1;

        return $this;
    }

    /**
     * Gets j1_p1
     * @return int
     */
    public function getJ1P1()
    {
        return $this->container['j1_p1'];
    }

    /**
     * Sets j1_p1
     * @param int $j1_p1
     * @return $this
     */
    public function setJ1P1($j1_p1)
    {
        $this->container['j1_p1'] = $j1_p1;

        return $this;
    }

    /**
     * Gets j2_g1
     * @return int
     */
    public function getJ2G1()
    {
        return $this->container['j2_g1'];
    }

    /**
     * Sets j2_g1
     * @param int $j2_g1
     * @return $this
     */
    public function setJ2G1($j2_g1)
    {
        $this->container['j2_g1'] = $j2_g1;

        return $this;
    }

    /**
     * Gets j2_t1
     * @return int
     */
    public function getJ2T1()
    {
        return $this->container['j2_t1'];
    }

    /**
     * Sets j2_t1
     * @param int $j2_t1
     * @return $this
     */
    public function setJ2T1($j2_t1)
    {
        $this->container['j2_t1'] = $j2_t1;

        return $this;
    }

    /**
     * Gets j2_p1
     * @return int
     */
    public function getJ2P1()
    {
        return $this->container['j2_p1'];
    }

    /**
     * Sets j2_p1
     * @param int $j2_p1
     * @return $this
     */
    public function setJ2P1($j2_p1)
    {
        $this->container['j2_p1'] = $j2_p1;

        return $this;
    }

    /**
     * Gets j1_w3
     * @return int
     */
    public function getJ1W3()
    {
        return $this->container['j1_w3'];
    }

    /**
     * Sets j1_w3
     * @param int $j1_w3
     * @return $this
     */
    public function setJ1W3($j1_w3)
    {
        $this->container['j1_w3'] = $j1_w3;

        return $this;
    }

    /**
     * Gets j1_t3
     * @return int
     */
    public function getJ1T3()
    {
        return $this->container['j1_t3'];
    }

    /**
     * Sets j1_t3
     * @param int $j1_t3
     * @return $this
     */
    public function setJ1T3($j1_t3)
    {
        $this->container['j1_t3'] = $j1_t3;

        return $this;
    }

    /**
     * Gets j1_p3
     * @return int
     */
    public function getJ1P3()
    {
        return $this->container['j1_p3'];
    }

    /**
     * Sets j1_p3
     * @param int $j1_p3
     * @return $this
     */
    public function setJ1P3($j1_p3)
    {
        $this->container['j1_p3'] = $j1_p3;

        return $this;
    }

    /**
     * Gets j2_w3
     * @return int
     */
    public function getJ2W3()
    {
        return $this->container['j2_w3'];
    }

    /**
     * Sets j2_w3
     * @param int $j2_w3
     * @return $this
     */
    public function setJ2W3($j2_w3)
    {
        $this->container['j2_w3'] = $j2_w3;

        return $this;
    }

    /**
     * Gets j2_t3
     * @return int
     */
    public function getJ2T3()
    {
        return $this->container['j2_t3'];
    }

    /**
     * Sets j2_t3
     * @param int $j2_t3
     * @return $this
     */
    public function setJ2T3($j2_t3)
    {
        $this->container['j2_t3'] = $j2_t3;

        return $this;
    }

    /**
     * Gets j2_p3
     * @return int
     */
    public function getJ2P3()
    {
        return $this->container['j2_p3'];
    }

    /**
     * Sets j2_p3
     * @param int $j2_p3
     * @return $this
     */
    public function setJ2P3($j2_p3)
    {
        $this->container['j2_p3'] = $j2_p3;

        return $this;
    }

    /**
     * Gets j1_age
     * @return int
     */
    public function getJ1Age()
    {
        return $this->container['j1_age'];
    }

    /**
     * Sets j1_age
     * @param int $j1_age
     * @return $this
     */
    public function setJ1Age($j1_age)
    {
        $this->container['j1_age'] = $j1_age;

        return $this;
    }

    /**
     * Gets j2_age
     * @return int
     */
    public function getJ2Age()
    {
        return $this->container['j2_age'];
    }

    /**
     * Sets j2_age
     * @param int $j2_age
     * @return $this
     */
    public function setJ2Age($j2_age)
    {
        $this->container['j2_age'] = $j2_age;

        return $this;
    }

    /**
     * Gets j1_rank
     * @return int
     */
    public function getJ1Rank()
    {
        return $this->container['j1_rank'];
    }

    /**
     * Sets j1_rank
     * @param int $j1_rank
     * @return $this
     */
    public function setJ1Rank($j1_rank)
    {
        $this->container['j1_rank'] = $j1_rank;

        return $this;
    }

    /**
     * Gets j2_rank
     * @return int
     */
    public function getJ2Rank()
    {
        return $this->container['j2_rank'];
    }

    /**
     * Sets j2_rank
     * @param int $j2_rank
     * @return $this
     */
    public function setJ2Rank($j2_rank)
    {
        $this->container['j2_rank'] = $j2_rank;

        return $this;
    }

    /**
     * Gets ground
     * @return int
     */
    public function getGround()
    {
        return $this->container['ground'];
    }

    /**
     * Sets ground
     * @param int $ground
     * @return $this
     */
    public function setGround($ground)
    {
        $this->container['ground'] = $ground;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
