<?php
/**
 * BatchExecutionStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * BatchExecutionStatus Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BatchExecutionStatus implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'status_code' => 'string',
        'results' => 'object',
        'details' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'status_code' => 'StatusCode',
        'results' => 'Results',
        'details' => 'Details'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'status_code' => 'setStatusCode',
        'results' => 'setResults',
        'details' => 'setDetails'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'status_code' => 'getStatusCode',
        'results' => 'getResults',
        'details' => 'getDetails'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $status_code job status code
      * @var string
      */
    protected $status_code = 'NotStarted';
    
    /**
      * $results 
      * @var object
      */
    protected $results;
    
    /**
      * $details 
      * @var string
      */
    protected $details;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->status_code = $data["status_code"];
            $this->results = $data["results"];
            $this->details = $data["details"];
        }
    }
    
    /**
     * Gets status_code
     * @return string
     */
    public function getStatusCode()
    {
        return $this->status_code;
    }
  
    /**
     * Sets status_code
     * @param string $status_code job status code
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $allowed_values = array("NotStarted", "Running", "Failed", "Cancelled", "Finished");
        if (!in_array($status_code, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status_code', must be one of 'NotStarted', 'Running', 'Failed', 'Cancelled', 'Finished'");
        }
        $this->status_code = $status_code;
        return $this;
    }
    
    /**
     * Gets results
     * @return object
     */
    public function getResults()
    {
        return $this->results;
    }
  
    /**
     * Sets results
     * @param object $results 
     * @return $this
     */
    public function setResults($results)
    {
        
        $this->results = $results;
        return $this;
    }
    
    /**
     * Gets details
     * @return string
     */
    public function getDetails()
    {
        return $this->details;
    }
  
    /**
     * Sets details
     * @param string $details 
     * @return $this
     */
    public function setDetails($details)
    {
        
        $this->details = $details;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
